'use server';
/**
 * @fileOverview Generates a comprehensive tagging report based on SEO analysis.
 *
 * - generateTaggingReport - A function that generates the tagging report.
 * - GenerateTaggingReportInput - The input type for the generateTaggingReport function.
 * - GenerateTaggingReportOutput - The return type for the generateTaggingReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import fs from 'fs/promises';
import path from 'path';

const GenerateTaggingReportInputSchema = z.object({
  seoReport: z.any().describe('The SEO report generated by the SEO Analyzer Agent.'),
  scrapJson: z.any().describe('The original scrap JSON generated by the Scraping Agent.'),
});
export type GenerateTaggingReportInput = z.infer<typeof GenerateTaggingReportInputSchema>;

const GenerateTaggingReportOutputSchema = z.object({
  report: z.string().describe('The Markdown / structured JSON report.'),
  readyToExport: z.string().describe('A ready_to_export version suitable for rendering in PDF.'),
});
export type GenerateTaggingReportOutput = z.infer<typeof GenerateTaggingReportOutputSchema>;

export async function generateTaggingReport(input: GenerateTaggingReportInput): Promise<GenerateTaggingReportOutput> {
  return generateTaggingReportFlow(input);
}

// Helper function to read the implementation guide
async function getImplementationGuideContext(): Promise<string> {
  try {
    // This path is relative to the project root where the server is running.
    const guidePath = path.join(process.cwd(), 'src', 'lib', 'IMPLEMENTATION_GUIDE.md');
    return await fs.readFile(guidePath, 'utf-8');
  } catch (error) {
    console.error('Error reading IMPLEMENTATION_GUIDE.md:', error);
    return 'Implementation guide not available.';
  }
}

const prompt = ai.definePrompt({
  name: 'generateTaggingReportPrompt',
  input: {schema: z.object({
    ...GenerateTaggingReportInputSchema.shape,
    implementationGuideContext: z.string(),
  })},
  output: {schema: GenerateTaggingReportOutputSchema},
  prompt: `You are an expert in SEO and web analytics. You will generate a comprehensive tagging report based on the SEO analysis and the original website structure.

Use the following implementation guide as your reference for structure and terminology:
{{implementationGuideContext}}

SEO Report:
{{seoReport}}

Original Scrap JSON:
{{scrapJson}}

Your report should include the following sections:
- Overview
- Recommended events
- dataLayer structure
- Suggested GA4 mappings
- Tagging consistency summary

Generate a ready_to_export version suitable for rendering in PDF.

Ensure the report is well-structured and easy to understand.`,
});

const generateTaggingReportFlow = ai.defineFlow(
  {
    name: 'generateTaggingReportFlow',
    inputSchema: GenerateTaggingReportInputSchema,
    outputSchema: GenerateTaggingReportOutputSchema,
  },
  async input => {
    const implementationGuideContext = await getImplementationGuideContext();
    const {output} = await prompt({...input, implementationGuideContext});
    return output!;
  }
);
